<?xml version="1.0"?>
<!DOCTYPE WMT_MS_Capabilities SYSTEM
 "http://schemas.opengis.net/wms/1.1.1/WMS_MS_Capabilities.dtd">

<?python

from cows.pylons.genshi_util import RenameElementFilter
from genshi import QName
from pylons import url

?>

<WMT_MS_Capabilities xmlns:py="http://genshi.edgewall.org/"
          xmlns:xlink="http://www.w3.org/1999/xlink"
		     version="1.1.1">

  <!--! ====================================================================== -->
  <!--!
      To change the tag name we need to wrap a markup macro in a python
      function
  -->

  <Operation py:def="_opContent(op)">
    <Format py:for="f in op.parameters['Format'].possibleValues.allowedValues" py:content="f"/>
    <DCPType><HTTP>
      <Get>
	<OnlineResource xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" 
			xlink:href="${op.get.href}"/>
      </Get>
    </HTTP></DCPType>
  </Operation>
  
  
    <py:def function="markupLegendURL(l)">
      <LegendURL width="${l.width}" height="${l.height}">
         <Format>${l.format}</Format>
         <OnlineResource xlink:type="simple" xlink:href="${l.onlineResource.href}"/>
      </LegendURL>
    </py:def>
  
	<py:def function="markupStyle(s)">
	  <Style>
	    <Name>${s.name}</Name>
	    <Title>${s.title}</Title>
	    <py:for each="l in s.legendURLs" py:if="getattr(s, 'legendURLs', None) != None">
	      ${markupLegendURL(l)}
	    </py:for>
	  </Style>
	</py:def>
    
    <py:def function="markupMetadataURL(l)">
      <MetadataURL type="${showAtt(l, 'type')}" >
         <Format>${l.format}</Format>
         <OnlineResource xlink:type="simple" xlink:href="${l.onlineResource.href}"/>
      </MetadataURL>
    </py:def>    
  
  <?python
  
  def markupOperation(opName, op):
    """Render an OWS operation description for the Capabilities section.
    """

    return RenameElementFilter(QName(opName))(_opContent(op))

  ?>


<?python

    def showAtt(obj, attname):
        if not hasattr(obj,attname) or getattr(obj, attname) == None:
            return ''
            
        return getattr(obj, attname)
         

?>

  <Layer py:def="markupLayer(ds)" queryable="${int(ds.queryable)}">
    
    <py:if test="ds.identifier is not None">
        <Name py:content="ds.identifier"/>
    </py:if>
    
    <Title py:content="ds.titles[0]"/>
    <Abstract py:if="len(ds.abstracts)>0" py:content="ds.abstracts[0]"/>
    
    <py:if test="ds.CRSs is not None">    
        <CRS py:for="crs in ds.CRSs" py:content="crs"/>
    </py:if>
    
    <py:for each="bb in ds.boundingBoxes">
      <BoundingBox SRS="${bb.crs}"
		   minx="${'%.2f'%bb.lowerCorner[0]}"
		   miny="${'%.2f'%bb.lowerCorner[1]}"
		   maxx="${'%.2f'%bb.upperCorner[0]}"
		   maxy="${'%.2f'%bb.upperCorner[1]}"/>
    </py:for>



    <!--!TODO Attribution from metadata -->
    <!--!TODO AuthorityURL from metadata -->
    <!--!TODO FeatureListURL from metadata -->
    <!--!TODO Identifier from metadata -->
    <!--!TODO DataURL from metadata -->
    <!--!TODO MetadataURL from metadata -->
    
    <!--!NOTE: this is an ad-hoc implementation not using the ows_common.model classes
         !TODO: fixme -->
    <!--!TODO ScaleHint -->

    <Dimension py:for="d_n, d in ds.dimensions.iteritems()"
	       name="${d_n}" units="${d.valuesUnit}"
	       unitSymbol="${d.unitSymbol}"/>
	       
    <Extent py:for="d_n, d in ds.dimensions.iteritems()" name="${d_n}" default="${d.defaultValue}" 
	    py:content="','.join(d.possibleValues.allowedValues)"/>
<!--! nearestValue="${int(d.nearestValue)}" -->

    
    <py:if test="ds.identifier is not None">
    
        <py:choose test="ds.styles">
    
            <py:when test="['']">
                <Style>
                    <Name>default</Name>
                    <Title>Default</Title>
                    <LegendURL width="${ds.legendSize[0]}" height="${ds.legendSize[1]}">
	                    <Format py:for="f in ds.legendFormats" py:content="f"/>
	                    <OnlineResource xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" 
	                        xlink:href="${url.current(qualified=True, action='index')}?request=GetLegend&amp;layers=${ds.identifier}"/>
                    </LegendURL>
                </Style>
            </py:when>
    
            <py:otherwise>
                <py:for each="s in ds.styles" py:if="getattr(ds, 'styles', None) != None">
                    ${markupStyle(s)}
                </py:for>
            </py:otherwise>
    
        </py:choose>
        
        <py:if test="len(ds.metadataURLs) > 0">
            <py:for each="url in ds.metadataURLs">
                ${markupMetadataURL(url)}
            </py:for>
        </py:if>
        
    </py:if>    
    
    <Layer py:for="c in ds.children" py:replace="markupLayer(c)"></Layer>


  </Layer>

  <!--! ====================================================================== -->


  <Service py:with="sm=c.capabilities; si=c.capabilities.serviceIdentification">
    <Name>OGC:WMS</Name>
    <Title py:content="si.titles[0]"/>
    <Abstract py:if="len(si.abstracts)>0" py:content="si.abstracts[0]"/>
    <KeywordList>
      <Keyword py:for="kw in si.keywords"
	       py:content="kw"/>
    </KeywordList>
    <OnlineResource xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" 
		    xlink:href="${url.current(qualified=True, action='index')}?"/>
    
    <ContactInformation py:if="sm.serviceProvider is not None"
			py:with="rp=sm.serviceProvider.serviceContact">
      <ContactPersonPrimary>
	<ContactPerson py:if="rp is not None" py:content="rp.individualName"/>
	<ContactOrganization py:content="sm.serviceProvider.providerName"/>
      </ContactPersonPrimary>
      <ContactPosition py:content="rp.positionName"/>

      <py:with py:if="rp.contactInfo is not None" vars="cn=rp.contactInfo">
	<ContactAddress py:if="cn.address is not None">
	  <AddressType>postal</AddressType>
	  <Address>
	    <py:for each="d in cn.address.deliveryPoints">${d}</py:for>
	  </Address>
	  <City py:content="cn.address.city"/>
	  <StateOrProvince py:content="cn.address.administrativeArea"/>
	  <PostCode py:content="cn.address.postalCode"/>
	  <Country py:content="cn.address.country"/>
	</ContactAddress>
	<ContactVoiceTelephone py:if="cn.phone is not None"
			       py:content="cn.phone.voice"/>
	<ContactFacsimileTelephone py:if="cn.phone is not None"
				   py:content="cn.phone.facsimile"/>
	<ContactElectronicMailAddress py:if="cn.address is not None"
				      py:content="cn.address.electronicMailAddress"/>
      </py:with>
    </ContactInformation>
    
    <Fees py:content="si.fees"/>
    <AccessConstraints py:content="si.accessConstraints"/>
  </Service>
  
  <!--! These fields are represented in ows_common as service constraints -->
  <Capability py:with="sm=c.capabilities; om=sm.operationsMetadata">
    <py:if test="om is not None">
      <?python ops = ['GetCapabilities', 'GetMap', 'GetFeatureInfo'] ?>
      <Request>
	<py:for each="opName in ops" py:if="opName in om.operationDict.keys()">
	  <span py:content="markupOperation(opName, om.operationDict[opName])" py:strip="True"/>
	</py:for>
	<py:for each="opName in ops" py:if="opName in om.operationDict.keys()">
	  <?python exceptions = om.operationDict[opName].parameters.get('ExceptionFormat') ?>
	  <Exception py:if="exceptions is not None">
	    <Format py:for="e in exceptions.possibleValues.allowedValues"
		    py:content="e"/>
	  </Exception>
	</py:for>
      </Request>
    </py:if>
    
    <!--!TODO:  capability exceptions -->
    <Exception><Format>text/xml</Format></Exception>

    <Layer py:if="sm.contents is not None">
      <Title>Contents</Title>
      <Layer py:for="ds in sm.contents.datasetSummaries"
	     py:replace="markupLayer(ds)">
      </Layer>
    </Layer>
  </Capability>
</WMT_MS_Capabilities>
